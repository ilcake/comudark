options
{
  STATIC = false;
}

PARSER_BEGIN(MyNewGrammar)
/** Simple brace matcher. */
package good.love.music.comu;
import java.util.ArrayList;
import good.love.music.service.URLGenerator;
import good.love.music.Exception.TempoUnderflowException;
import good.love.music.Exception.TempoOverflowException;
import good.love.music.Exception.SoundFileNotFoundException;
import good.love.music.Exception.BpmNotDefinedException;
import good.love.music.Exception.AlreadySetBPMException;
import good.love.music.Exception.InstrumentNotFoundException;
import java.io.IOException;
import javax.sound.sampled.UnsupportedAudioFileException;

public class MyNewGrammar
{
  private int btLocation = 0;

  private String result = "";

  private String url = "";

  private int tempo = 16;

  private double bpm;
  URLGenerator generator;
  int location = 0;
  int doit = 1;
  Token note = new Token();
  Token effect = new Token();
  Token value = new Token();
  Token number = new Token();
  ArrayList < Integer > list = new ArrayList < Integer > ();
  ArrayList < String > noteList = new ArrayList < String > ();
  String reverb = "";
  String delay = "";
  String low = "";
  String high = "";
  boolean isSetBPM = false;
  int errorLine = 1;

  public String getResult() throws Exception, Error
  {
    while (readLine())
    {
    }
    return result;
  }

  public int getErrorLine()
  {
    return errorLine;
  }

  public void setURLGenerator(URLGenerator generator)
  {
    this.generator = generator;
  }

  public void setCustomBPM(double value)
  {
    double theTempoValue = 16;
    bpm = ((theTempoValue * 60) / value) / 4;
  }

  public double getLoc(double loc, double dloc)
  {
    double where = loc * bpm;
    double fwhere = where + (bpm / tempo * dloc);
    return fwhere;
  }

  public void setBPM(String key) throws Exception
  {
    bpm = generator.getBPM(key);
  }
}

PARSER_END(MyNewGrammar)

SKIP :
{
  " "
| "\t"
| "\r"
}

TOKEN :
{
  < TEMPO : "tempo" >
| < BPM : "bpm" >
| < DO : "do" >
| < LOCATION : "location" >
| < INS : "ins" >
| < LOOP : "loop" >
| < EFFECT :
    "reverb"
  | "delay"
  | "low"
  | "high" >
| < SETNOTE : "note" >
| < NUMBER : (< DIGIT >)+ >
| < DIGIT : [ "0"-"9" ] >
| < NOTE : ([ "A"-"Z", "a"-"z" ])+ (< NUMBER >)* >
| < EOL : "\n" >
}

boolean readLine() throws Exception :
{
}
{
  < TEMPO > number = < NUMBER > ";"
  {
    tempo = Integer.parseInt(number.image);
    if (tempo <= 0)
    {
      throw new TempoUnderflowException();
    }
    return true;
  }
| 
  < BPM > number = < NUMBER > ";"
  {
    if (isSetBPM)
    {
      throw new AlreadySetBPMException();
    }
    setCustomBPM(Double.parseDouble(number.image));
    isSetBPM = true;
    return true;
  }
| 
  < INS > note = < NOTE >
  {
    if (generator.getList().containsKey(note.image))
    {
      url = note.image;
    }
    else
    {
      throw new InstrumentNotFoundException();
    }
    return inTheMethod();
  }
| 
  < LOOP > note = < NOTE >
  {
    if (generator.getList().containsKey(note.image.replaceAll("\\d", "")))
    {
      url = note.image;
      setBPM(url);
      isSetBPM = true;
    }
    else
    {
      throw new InstrumentNotFoundException();
    }
    return inTheMethod();
  }
| < EOL >
  {
    errorLine++;
    return true;
  }
| < EOF >
  {
    return false;
  }
}

boolean inTheMethod() throws Exception :
{
}
{
  "{"
  {
    location = 0;
    doit = 1;
    effect = new Token();
    note = new Token();
    number = new Token();
    list = new ArrayList < Integer > ();
    noteList = new ArrayList < String > ();
    reverb = "null";
    delay = "null";
    low = "null";
    high = "null";
    while (makeSound())
    {}
  }
  "}"
  {
    for (int i = 0; i < doit; i++)
    {
      if (list.size() > 0)
      {
        for (int j = 0; j < list.size(); j++)
        {
          if (!reverb.equals("null")) 
          result += String.format("loadAudio('%s', %f,'%s',%s,%s,%s); \n", generator.getFilePath(url + noteList.get(j)), getLoc(location + i, list.get(j)), generator.getFilePath("effect" + reverb), delay, low, high);
          else 
          result += String.format("loadAudio('%s', %f,%s,%s,%s,%s); \n", generator.getFilePath(url + noteList.get(j)), getLoc(location + i, list.get(j)), reverb, delay, low, high);
        }
      }
      else
      {
        if (!reverb.equals("null")) 
        result += String.format("loadAudio('%s', %f,'%s',%s,%s,%s); \n", generator.getFilePath(url), getLoc(location, 0), generator.getFilePath("effect" + reverb), delay, low, high);
        else 
        result += String.format("loadAudio('%s', %f,%s,%s,%s,%s); \n", generator.getFilePath(url), getLoc(location, 0), reverb, delay, low, high);
        location++;
      }
    }
    return true;
  }
}

boolean makeSound() throws Exception :
{
}
{
  < DO > number = < NUMBER > ";"
  {
    doit = Integer.parseInt(number.image);
    return true;
  }
| 
  < LOCATION > number = < NUMBER > ";"
  {
    location = Integer.parseInt(number.image);
    return true;
  }
| 
  effect = < EFFECT > value = < NOTE > ";"
  {
    switch (effect.image)
    {
      case "reverb" : 
      reverb = value.image;
      break;
      case "delay" : 
      delay = value.image;
      break;
      case "low" : 
      low = value.image;
      break;
      case "high" : 
      high = value.image;
      break;
    }
    return true;
  }
| 
  < SETNOTE > "(" note = < NOTE > "," number = < NUMBER > ");"
  {
    if (!isSetBPM)
    {
      throw new BpmNotDefinedException();
    }
    if (tempo < Integer.parseInt(number.image))
    {
      throw new TempoOverflowException();
    }
    list.add(Integer.parseInt(number.image));
    noteList.add(note.image);
    return true;
  }
| < EOL >
  {
    errorLine++;
    return true;
  }
|
  {
    return false;
  }
}
